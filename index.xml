<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhitao Pan</title>
    <link>https://zhitaop.github.io/</link>
    <description>Recent content on Zhitao Pan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhitaop.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Node.js Webapp</title>
      <link>https://zhitaop.github.io/project/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zhitaop.github.io/project/project1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Multi-server broadcast system</title>
      <link>https://zhitaop.github.io/project/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zhitaop.github.io/project/project2/</guid>
      <description>This is a multi-server system for broadcasting messages between clients inplemented in Java. The codes and basic introduction of the project can be found on my github repo here.
The message broadcasting is done by common implementation of the Socket/ServerSocket class and JSON object handling in Java, nothing too fancy. The code quality and structure can probably be improved quite a bit, like applying more software design pattern and making it more object-oriented, but that&amp;rsquo;s not the focus of this post.</description>
    </item>
    
    <item>
      <title>First-class functions</title>
      <link>https://zhitaop.github.io/post/first-class-function/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zhitaop.github.io/post/first-class-function/</guid>
      <description>When I first started my nodejs webapp project, I wrote all my routes in a single app.js file:
app.get(&#39;/some route&#39;, (req,res) =&amp;gt; { /*do something in the callback function*/ }); app.get(&#39;/some other route&#39;, (req,res) =&amp;gt; { /*do something in the callback function*/ }); app.post(&#39;/some other route&#39;, (req,res) =&amp;gt; { /*do something in the callback function*/ }); //and so on...  Soon I realized that since the codes in every routes are pretty long, the app.</description>
    </item>
    
    <item>
      <title>The asynchronous nature of Javascript</title>
      <link>https://zhitaop.github.io/post/javascript/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zhitaop.github.io/post/javascript/</guid>
      <description>It all started when I first learned Node.js for back-end development. I started with some simple snippet like the following:
var http = require(&#39;http&#39;); //create a server object: http.createServer(function (req, res) { res.write(&#39;Hello World!&#39;); //write a response to the client res.end(); //end the response }).listen(8080); //the server object listens on port 8080  This looks simple enough albeit the seemingly slightly odd syntax, all it does is creating a HTTP server that listens to a server port and gives a response when it receives a request.</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://zhitaop.github.io/post/algorithms/</link>
      <pubDate>Tue, 13 Feb 2018 23:11:51 +1000</pubDate>
      
      <guid>https://zhitaop.github.io/post/algorithms/</guid>
      <description>This is one of a series of articles I plan to write about the subjects I learned in my Software Engineering degree, as a summary and rivision of all the knowledge I gained.
Algorithms and data structures are perhaps the most basic yet most important subjects for all computer science students, that&amp;rsquo;s why I started with this. First of all here&amp;rsquo;s a website that I found quite useful to help learning algorithms and data structures by visualizing.</description>
    </item>
    
  </channel>
</rss>